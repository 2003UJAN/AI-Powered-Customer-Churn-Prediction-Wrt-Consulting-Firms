# -*- coding: utf-8 -*-
"""generate_data

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_PEVqD5_oUafS3abY1v8PGgQQlyaqdLO
"""

!pip install faker

import pandas as pd
import numpy as np
from faker import Faker
import random
import os

# Initialize Faker
fake = Faker()

# Number of samples
num_clients = 1000

# Generate data
data = {
    'ClientID': [fake.uuid4() for _ in range(num_clients)],
    'FirmSize': [random.choice(['Small (<50)', 'Medium (50-250)', 'Large (250+)', 'Enterprise (>1000)']) for _ in range(num_clients)],
    'Industry': [random.choice(['Tech', 'Finance', 'Healthcare', 'Retail', 'Manufacturing']) for _ in range(num_clients)],
    'ContractTenureMonths': np.random.randint(1, 72, size=num_clients),
    'ProjectsCompleted': np.random.randint(0, 50, size=num_clients),
    'AverageProjectValue': np.random.uniform(5000, 100000, size=num_clients).round(2),
    'SupportTickets': np.random.randint(0, 25, size=num_clients),
    'ClientSatisfactionScore': np.random.randint(1, 6, size=num_clients),
    'LastInteractionDays': np.random.randint(0, 365, size=num_clients),
    'MonthlyRecurringRevenue': np.random.uniform(1000, 20000, size=num_clients).round(2)
}

df = pd.DataFrame(data)

# --- Create the target variable 'Churn' based on logical rules ---
# Higher churn probability for clients with low satisfaction, few projects, etc.
churn_probability = (
    - 0.3 * df['ClientSatisfactionScore']
    + 0.01 * df['LastInteractionDays']
    + 0.05 * df['SupportTickets']
    - 0.01 * df['ContractTenureMonths']
    - 0.02 * df['ProjectsCompleted']
)

# Normalize probability and add randomness
churn_probability = (churn_probability - churn_probability.min()) / (churn_probability.max() - churn_probability.min())
churn_probability += np.random.normal(0, 0.1, size=num_clients)

# Assign churn based on a threshold (e.g., top 15% most likely to churn)
churn_threshold = churn_probability.quantile(0.85)
df['Churn'] = (churn_probability > churn_threshold).astype(int)

# Ensure the 'assets' directory exists
os.makedirs('assets', exist_ok=True)

# Save to CSV in the assets folder
df.to_csv('assets/synthetic_data.csv', index=False)

print("âœ… Synthetic dataset created and saved to assets/synthetic_data.csv")
print(f"Churn rate: {df['Churn'].mean():.2%}")
