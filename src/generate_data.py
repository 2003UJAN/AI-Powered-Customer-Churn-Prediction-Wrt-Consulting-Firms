# -*- coding: utf-8 -*-
"""generate_data

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mdKNzNwLyO2D5B5kpmr_8qgLbvqnmLk9
"""

!pip install streamlit shap xgboost scikit-learn joblib tensorflow matplotlib seaborn plotly tqdm colabcode

import numpy as np
import pandas as pd
import json
import os
import joblib
import shap
import matplotlib.pyplot as plt

from tqdm import tqdm
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, f1_score, roc_auc_score, confusion_matrix

from xgboost import XGBClassifier
import tensorflow as tf
from tensorflow.keras import layers, models

def generate_synthetic(num_customers=2000, seq_len=12, churn_rate=0.15, seed=42):
    np.random.seed(seed)
    customers, sequences = [], []

    for cid in range(num_customers):
        tenure = np.random.randint(1, 60)
        contract_len = np.random.choice([6, 12, 24, 36])
        annual_revenue = np.round(5000 + np.random.exponential(1.0) * 10000, 2)
        num_projects = np.random.poisson(2) + 1
        industry_risk = np.clip(np.random.normal(0.5, 0.2), 0, 1)

        base_usage = np.clip(np.random.normal(100, 30), 10, 300)
        trend = np.random.normal(0, 2)
        monthly_usage = np.maximum(0.0, base_usage + trend * np.arange(seq_len) + np.random.normal(0, 10, seq_len))
        monthly_support_calls = np.random.poisson(lam=np.maximum(0.1, monthly_usage/120), size=seq_len)
        monthly_bill = monthly_usage * (50 + np.random.normal(0, 5)) / 100

        recent_usage = monthly_usage[-3:].mean()
        recent_calls = monthly_support_calls[-3:].sum()
        churn_prob = 0.02 + 0.3*(industry_risk) + 0.35*(1-np.tanh(recent_usage/150)) + 0.15*(recent_calls/10)
        churn = np.random.rand() < np.clip(churn_prob, 0, 0.9)

        customers.append({
            "customer_id": f"C{cid:05d}",
            "tenure_months": tenure,
            "contract_len_months": contract_len,
            "annual_revenue": annual_revenue,
            "num_projects": num_projects,
            "industry_risk": industry_risk,
            "usage_mean_12m": monthly_usage.mean(),
            "usage_std_12m": monthly_usage.std(),
            "usage_last_3m_mean": monthly_usage[-3:].mean(),
            "support_calls_12m": monthly_support_calls.sum(),
            "bill_mean_12m": monthly_bill.mean(),
            "churn": int(churn)
        })

        sequences.append({
            "customer_id": f"C{cid:05d}",
            "usage_seq": monthly_usage.tolist(),
            "support_calls_seq": monthly_support_calls.tolist(),
            "bill_seq": monthly_bill.tolist()
        })

    df_tab = pd.DataFrame(customers)
    df_seq = pd.DataFrame(sequences)
    df = df_tab.merge(df_seq, on="customer_id")
    df["usage_seq"] = df["usage_seq"].apply(json.dumps)
    df["support_calls_seq"] = df["support_calls_seq"].apply(json.dumps)
    df["bill_seq"] = df["bill_seq"].apply(json.dumps)
    return df

df = generate_synthetic()
df.to_csv("synthetic_customers.csv", index=False)
df.head()