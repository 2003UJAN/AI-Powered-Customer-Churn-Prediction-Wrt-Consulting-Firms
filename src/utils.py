# -*- coding: utf-8 -*-
"""utils

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mdKNzNwLyO2D5B5kpmr_8qgLbvqnmLk9
"""

!pip install streamlit shap xgboost scikit-learn joblib tensorflow matplotlib seaborn plotly tqdm colabcode

import json
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, f1_score, roc_auc_score, confusion_matrix

def read_dataset(csv_path):
    df = pd.read_csv(csv_path)
    # decode sequences
    df["usage_seq"] = df["usage_seq"].apply(json.loads)
    df["support_calls_seq"] = df["support_calls_seq"].apply(json.loads)
    df["bill_seq"] = df["bill_seq"].apply(json.loads)
    return df

def train_test_split_custom(df, test_size=0.2, random_state=42):
    X = df.drop(columns=["churn", "customer_id"])
    y = df["churn"].values
    # use simple stratified split
    train_idx, test_idx = train_test_split(df.index, test_size=test_size, stratify=y, random_state=random_state)
    return df.loc[train_idx].reset_index(drop=True), df.loc[test_idx].reset_index(drop=True)

def metrics_report(y_true, y_pred_proba, threshold=0.5):
    y_pred = (y_pred_proba >= threshold).astype(int)
    acc = accuracy_score(y_true, y_pred)
    f1 = f1_score(y_true, y_pred, zero_division=0)
    try:
        auc = roc_auc_score(y_true, y_pred_proba)
    except Exception:
        auc = None
    tn, fp, fn, tp = confusion_matrix(y_true, y_pred).ravel()
    return {"accuracy": acc, "f1": f1, "auc": auc, "tn": tn, "fp": fp, "fn": fn, "tp": tp}